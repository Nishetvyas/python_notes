{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "Breaking from Loop.\n"
     ]
    }
   ],
   "source": [
    "i = 0\n",
    "while i<7:\n",
    "    print(i)\n",
    "    if i==4:\n",
    "        print(\"Breaking from Loop.\")\n",
    "        break\n",
    "    i +=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "4\n",
      "6\n",
      "7\n"
     ]
    }
   ],
   "source": [
    "# A continue statement will skip to the next iteration of the loop bypassing the rest of the current block but\n",
    "# continuing the loop. As with break, continue can only appear inside loops:\n",
    "for i in (1,2,4,5,6,7):\n",
    "    if i == 2 or i == 5:\n",
    "        continue\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "for i in [0, 1, 2, 3, 4]:\n",
    "     print(i)\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "for x in range(6):\n",
    "     print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 :: one\n",
      "1 :: two\n",
      "2 :: three\n",
      "3 :: four\n"
     ]
    }
   ],
   "source": [
    "# enumerate will generate tuples, which are unpacked into index (an integer) and item (the actual value from the list).\n",
    "# The above loop will print\n",
    "\n",
    "for index, item in enumerate(['one', 'two', 'three', 'four']):\n",
    "     a = print(index, '::', item)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no exception\n",
      "no exception\n",
      "m\n"
     ]
    }
   ],
   "source": [
    "a = [1, 2,'m', 3, 4,'x']\n",
    "for i in a:\n",
    "    if type(i) is not int:\n",
    "        print(i)\n",
    "        break\n",
    "    else:\n",
    "        print(\"no exception\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Keys a\n",
      "Keys b\n",
      "Keys c\n",
      "value 1\n",
      "value 2\n",
      "value 3\n",
      "a :: 1\n",
      "b :: 2\n",
      "c :: 3\n",
      "key a : value 1\n",
      "key b : value 2\n",
      "key c : value 3\n"
     ]
    }
   ],
   "source": [
    "d = {\"a\": 1, \"b\": 2, \"c\": 3}\n",
    "for i in d:\n",
    "    print(\"Keys\",i)\n",
    "for i in d.values():\n",
    "    print(\"value\", i)\n",
    "for key,value in d.items():\n",
    "    print(key,\"::\", value)\n",
    "for i in d:\n",
    "    print(\"key\",i,\":\",\"value\",d[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('a', 'b', 'c')\n",
      "('x', 'y', 'z')\n",
      "('1', '2', '3')\n",
      "it i ['a', 'b', 'c']\n",
      "it i ['x', 'y', 'z']\n",
      "it i ['1', '2', '3']\n",
      "its y 1\n",
      "its y 2\n",
      "its y 3\n"
     ]
    }
   ],
   "source": [
    "collection = [('a', 'b', 'c'), ('x', 'y', 'z'), ('1', '2', '3')]\n",
    "\n",
    "for i in collection:\n",
    "    print(i)\n",
    "for i in collection:\n",
    "    i = list(i)\n",
    "    print('it i',i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "alpha has an index of 0\n",
      "bravo has an index of 1\n",
      "charlie has an index of 2\n",
      "delta has an index of 3\n",
      "echo has an index of 4\n",
      "lst at 2 contains charlie\n",
      "lst at 3 contains delta\n"
     ]
    }
   ],
   "source": [
    "lst = ['alpha', 'bravo', 'charlie', 'delta', 'echo']\n",
    "# you need both the element and the index of that element. \n",
    "# The enumerate keyword performs that task.\n",
    "for idx, s in enumerate(lst):\n",
    "    print(\"%s has an index of %d\" % (s, idx))\n",
    "# for s in lst:\n",
    "#      print(upper())\n",
    "for i in range(2,4):\n",
    "    print(\"lst at %d contains %s\" % (i, lst[i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['bravo', 'delta']\n"
     ]
    }
   ],
   "source": [
    "lst = ['alpha', 'bravo', 'charlie', 'delta', 'echo']\n",
    "print(lst[1::2])\n",
    "# for s in lst[1::2]:\n",
    "#      print(s)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "# Print all elements of a list using for loop.\n",
    "lis = [1,2,3,4,5]\n",
    "for i in lis:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 20 30\n",
      "['10', '20', '30']\n",
      "20\n",
      "['10', '30']\n"
     ]
    }
   ],
   "source": [
    "# Take inputs from user to make a list. \n",
    "# Again take one input from user and search it in the list and delete that element, if found. \n",
    "# Iterate over list using for loop.\n",
    "\n",
    "\n",
    "lis = input()\n",
    "a =lis.split(\" \")\n",
    "print(a)\n",
    "i = input()\n",
    "if i in a:\n",
    "    a.remove(i)\n",
    "    print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[12, 24, 36, 48, 60, 72, 84, 96, 108, 120]\n"
     ]
    }
   ],
   "source": [
    "# Print multiplication table of 14 from a list in which multiplication table of 12 is stored.\n",
    "lis = []\n",
    "for i in range(1,121):\n",
    "    if i%12==0:\n",
    "        lis.append(i)\n",
    "print(lis)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 4, 9, 16, 25]\n"
     ]
    }
   ],
   "source": [
    "#You are given with a list of integer elements. Make a new list which will store square of elements of previous list.\n",
    "o_lis  = [1,3,2,4,5]\n",
    "n_lis =[]\n",
    "for i in o_lis:\n",
    "    n_lis.append(i**2)\n",
    "print(sorted(n_lis))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100] [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n",
      "[4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 30, 32, 36, 40, 42, 44, 48, 50, 52, 54, 56, 60, 64, 66, 68, 70, 72, 76, 78, 80, 84, 88, 90, 92, 96, 98, 100]\n"
     ]
    }
   ],
   "source": [
    "# Using range(1,101), make two list, one containing all even numbers and other containing all odd numbers.\n",
    "even =[]\n",
    "odd=[]\n",
    "for i in range(1,101):\n",
    "    if i%2==0:\n",
    "        even.append(i)\n",
    "    else:\n",
    "        odd.append(i)\n",
    "print(even,odd)\n",
    "\n",
    "# From the two list obtained in previous question, make new lists, containing only numbers\n",
    "# which are divisible by 4, 6, 8, 10, 3, 5, 7 and 9 in separate lists.\n",
    "new =[]\n",
    "for j in even:\n",
    "    if j%4==0 or j%6==0 or j%8==0 or j%10==0 or j%3==0 or j%5==0 or j%7==0 or j%9==0:\n",
    "        new.append(j)\n",
    "print(new)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n",
      "<class 'int'>\n",
      "<class 'str'>\n",
      "<class 'float'>\n",
      "<class 'int'>\n",
      "<class 'str'>\n",
      "<class 'int'>\n",
      "[1, 5, 23, 87] [40.34] ['nik', 'jimm']\n"
     ]
    }
   ],
   "source": [
    "# From a list containing ints, strings and floats, make three lists to store them separately\n",
    "\n",
    "lis = [1, 5, 'nik',40.34,23,'jimm',87]\n",
    "stri,ints,floats = [],[],[]\n",
    "for i in lis:\n",
    "    print(type(i))\n",
    "for i in lis:\n",
    "    if type(i)==int:\n",
    "        ints.append(i)\n",
    "    elif type(i)==float:\n",
    "        floats.append(i)\n",
    "    else: \n",
    "        stri.append(i)\n",
    "print(ints,floats,stri)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "right\n"
     ]
    }
   ],
   "source": [
    "# Use dictionary to store antonyms of words. E.g.- 'Right':'Left', 'Up':'Down', etc. \n",
    "# Display all words and then ask user to enter a word and display antonym of it.\n",
    "dic = {'Right':'Left', 'Up':'Down','low':'high'}\n",
    "a = input()\n",
    "for i in dic:\n",
    "    if a == i:\n",
    "        print(dic[i])\n",
    "    else:\n",
    "        print(\"Word not found in dict.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'M': 1, 'P': 2, 'I': 4, 'S': 4}\n"
     ]
    }
   ],
   "source": [
    "# Count the number of occurrence of each letter in word \"MISSISSIPPI\". Store count of every letter with the letter in a dictionary.\n",
    "from collections import Counter\n",
    "count = Counter(\"MISSISSIPPI\")\n",
    "# lambda x: x[1] is the lambda function. Here x is the argument and  x[1] is the expression that gets evaluated and returned.\n",
    "print(dict(sorted(count.items(), key=lambda x: x[1])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# E.g.-LIST : [\"no bun\",\"bug bun bug bun bug bug\",\"bunny bug\",\"buggy bug bug buggy\"]\n",
    "# STRING TAKEN : \"bug\"\n",
    "# OUTPUT LIST:[\"bug bun bug bun bug bug\",\"buggy bug bug buggy\",\"bunny bug\",\"no bun\"]\n",
    "\n",
    "\n",
    "# a = [\"no bun\",\"bug bun bug bun bug bug\",\"bunny bug\",\"buggy bug bug buggy\"]\n",
    "# b = \"bug\"\n",
    "# c = {}\n",
    "# for i in a:\n",
    "#     count = 0\n",
    "#     for j in i.split():\n",
    "#         if j == b:\n",
    "#             count = count+1\n",
    "#             c[count]=i\n",
    "#     d = [] \n",
    "# for s in sorted(c):\n",
    "#     d.append(c[s])\n",
    "# d.reverse()\n",
    "# print(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
